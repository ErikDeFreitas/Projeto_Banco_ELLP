<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>